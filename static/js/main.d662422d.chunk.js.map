{"version":3,"sources":["Components/body/body.js","App.js","serviceWorker.js","index.js"],"names":["Body","state","xoro","fill","text","win","items","_this","winner","i","setState","Object","objectSpread","includes","change","value","newfill","newgame","_this2","this","react_default","a","createElement","className","onClick","Component","App","body_body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d662422d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./body.css\";\r\nclass Body extends Component {\r\n  state = {\r\n    xoro: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    fill: \"o\",\r\n    text: \"\",\r\n    win: false\r\n  };\r\n  win = () => {\r\n    let items = this.state.xoro;\r\n    let winner = \"\";\r\n    for (var i = 0; i < 3; i++) {\r\n      if (\r\n        items[i * 3] === items[i * 3 + 1] &&\r\n        items[i * 3 + 1] === items[i * 3 + 2] &&\r\n        items[i * 3] !== \"\"\r\n      ) {\r\n        winner = items[i * 3];\r\n      } else if (\r\n        items[i] === items[i + 3] &&\r\n        items[i] === items[i + 6] &&\r\n        items[i] !== \"\"\r\n      ) {\r\n        winner = items[i];\r\n      } else if (\r\n        items[0] === items[4] &&\r\n        items[0] === items[8] &&\r\n        items[0] !== \"\"\r\n      ) {\r\n        winner = items[0];\r\n      } else if (\r\n        items[2] === items[4] &&\r\n        items[2] === items[6] &&\r\n        items[2] !== \"\"\r\n      ) {\r\n        winner = items[2];\r\n      }\r\n    }\r\n    if (winner !== \"\") {\r\n      this.setState({\r\n        ...this.state,\r\n        fill: \"\",\r\n        text: winner + \"wins\",\r\n        win: true\r\n      });\r\n    } else if (!this.state.xoro.includes(\"\")) {\r\n      this.setState({\r\n        ...this.state,\r\n        fill: \"\",\r\n        text: \"Draw\",\r\n        win: true\r\n      });\r\n    }\r\n  };\r\n  change = value => {\r\n    const items = this.state.xoro;\r\n    let newfill = this.state.fill;\r\n    if (items[value] === \"\") {\r\n      items[value] = this.state.fill;\r\n      newfill = this.state.fill === \"x\" ? \"o\" : \"x\";\r\n    }\r\n    this.setState({\r\n      ...this.state,\r\n      xoro: items,\r\n      fill: newfill,\r\n      text: this.state.text\r\n    });\r\n    this.win();\r\n  };\r\n  newgame = () => {\r\n    let items = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n    let newfill = \"o\";\r\n    this.setState({\r\n      ...this.state,\r\n      xoro: items,\r\n      fill: newfill,\r\n      text: \"\",\r\n      win: false\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"cell\" onClick={() => this.change(0)}>\r\n            <label>{this.state.xoro[0]}</label>\r\n          </div>\r\n          <div className=\"cell\" onClick={() => this.change(1)}>\r\n            <label>{this.state.xoro[1]}</label>\r\n          </div>\r\n          <div className=\"cell\" onClick={() => this.change(2)}>\r\n            <label>{this.state.xoro[2]}</label>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div className=\"row\">\r\n          <div className=\"cell\" onClick={() => this.change(3)}>\r\n            <label>{this.state.xoro[3]}</label>\r\n          </div>\r\n\r\n          <div className=\"cell\" onClick={() => this.change(4)}>\r\n            <label>{this.state.xoro[4]}</label>\r\n          </div>\r\n\r\n          <div className=\"cell\" onClick={() => this.change(5)}>\r\n            <label>{this.state.xoro[5]}</label>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div className=\"row\">\r\n          <div className=\"cell\" onClick={() => this.change(6)}>\r\n            <label>{this.state.xoro[6]}</label>\r\n          </div>\r\n          <div className=\"cell\" onClick={() => this.change(7)}>\r\n            <label>{this.state.xoro[7]}</label>\r\n          </div>\r\n          <div className=\"cell\" onClick={() => this.change(8)}>\r\n            <label>{this.state.xoro[8]}</label>\r\n          </div>\r\n        </div>\r\n        <div className=\"newgame\" onClick={() => this.newgame()}>\r\n          New Game\r\n        </div>\r\n\r\n        <div className={this.state.win ? \"win winner\" : \"win\"}>\r\n          {this.state.text}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from 'react';\nimport Body from './Components/body/body'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <h1>Tic Tac Toe</h1>\n        <Body></Body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}